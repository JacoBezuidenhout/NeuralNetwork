var socket=require("socket.io"),os=require("os"),childProcess=require("child_process"),path=require("path"),thread={Global:{MaxThreads:16,LogLevel:5,Port:85498,NodeExecutable:"node"},WorkerPool:[],Queue:[],Events:{OnFinish:function(){}},Server:void 0,Initialize:function(a){a.Port&&(thread.Global.Port=a.Port),a.MaxThreads&&(thread.Global.MaxThreads=a.MaxThreads),a.NodeExecutable&&(thread.Global.NodeExecutable=a.NodeExecutable),a.LogLevel&&(thread.Global.LogLevel=a.LogLevel),thread.Server=socket.listen(thread.Global.Port),thread.Server.set("log level",1),thread.Server.sockets.on("connection",function(a){a.on("Boot",function(b){thread.Work(a,b)}),a.on("Result",function(b){console.log("Worker "+b.id+": "+b.result),thread.Work(a,b)})})},Work:function(a,b){if(thread.Queue.length>0)a.emit("Work",{task:thread.Queue[0].Task,index:b.id}),thread.Queue=thread.Queue.slice(1),console.log("Worker "+b.id+": Grabbed Task from Queue, "+thread.Queue.length+" remaining"),0===thread.Queue.length&&console.log("Queue empty");else{console.log("Queue empty"),thread.WorkerPool[b.id].state=0;var c=0;thread.WorkerPool.forEach(function(a){c+=a.state}),0===c&&thread.Events.OnFinish()}},CreateThread:function(a){if(!a)return!1;thread.Queue.push(a),thread.Server.emit("Add",{});var b=thread.WorkerPool.length;if(b<thread.Global.MaxThreads){var c=path.join(__dirname,"..","lib","ThreadBase.js"),d=["node",c,thread.Global.Port,b],e=childProcess.exec(d.join(" "),function(a,c,d){console.log("Worker "+b+": stdout: "+c),console.log("Worker "+b+": stderr: "+d)});e.on("exit",function(a){console.log("Worker "+b+": Finished or exited with code "+a)}),thread.WorkerPool.push({state:1}),console.log("Created Worker Thread "+b)}return!0},End:function(){thread.Server.emit("End",{})},BaseTask:function(a){this.Task=""+a,this.OnExit=function(){}}};module.exports=thread;